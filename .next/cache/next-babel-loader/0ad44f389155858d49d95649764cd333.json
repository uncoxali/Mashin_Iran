{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './reducers';\nimport rootSaga from './saga';\n\nvar bindMiddleware = function bindMiddleware(middleware) {\n  if (true) {\n    return composeWithDevTools(applyMiddleware.apply(void 0, _toConsumableArray(middleware)));\n  }\n\n  return applyMiddleware.apply(void 0, _toConsumableArray(middleware));\n};\n\nexport var makeStore = function makeStore() {\n  var sagaMiddleware = createSagaMiddleware();\n  var store = createStore(rootReducer, bindMiddleware([sagaMiddleware]));\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["C:/Users/Ali/Desktop/MashinIran/store/index.ts"],"names":["createWrapper","applyMiddleware","createStore","composeWithDevTools","createSagaMiddleware","rootReducer","rootSaga","bindMiddleware","middleware","makeStore","sagaMiddleware","store","sagaTask","run","wrapper","debug"],"mappings":";AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAAyD,OAAzD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,WAAP,MAAwB,YAAxB;AACA,OAAOC,QAAP,MAAqB,QAArB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,UAAD,EAA6C;AAChE,YAA2C;AACvC,WAAOL,mBAAmB,CAACF,eAAe,MAAf,4BAAmBO,UAAnB,EAAD,CAA1B;AACH;;AACD,SAAOP,eAAe,MAAf,4BAAmBO,UAAnB,EAAP;AACH,CALD;;AAOA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAC3B,MAAMC,cAAc,GAAGN,oBAAoB,EAA3C;AACA,MAAMO,KAAK,GAAGT,WAAW,CAACG,WAAD,EAAcE,cAAc,CAAC,CAACG,cAAD,CAAD,CAA5B,CAAzB;AAECC,EAAAA,KAAD,CAAeC,QAAf,GAA0BF,cAAc,CAACG,GAAf,CAAmBP,QAAnB,CAA1B;AAEA,SAAOK,KAAP;AACH,CAPM;AASP,OAAO,IAAMG,OAAO,GAAGd,aAAa,CAACS,SAAD,EAAY;AAAEM,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAA7B","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, createStore, Middleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './reducers';\nimport rootSaga from './saga';\n\nconst bindMiddleware = (middleware: Middleware<any, any, any>[]) => {\n    if (process.env.NODE_ENV !== 'production') {\n        return composeWithDevTools(applyMiddleware(...middleware));\n    }\n    return applyMiddleware(...middleware);\n};\n\nexport const makeStore = () => {\n    const sagaMiddleware = createSagaMiddleware();\n    const store = createStore(rootReducer, bindMiddleware([sagaMiddleware]));\n\n    (store as any).sagaTask = sagaMiddleware.run(rootSaga);\n\n    return store;\n};\n\nexport const wrapper = createWrapper(makeStore, { debug: true });\n"]},"metadata":{},"sourceType":"module"}