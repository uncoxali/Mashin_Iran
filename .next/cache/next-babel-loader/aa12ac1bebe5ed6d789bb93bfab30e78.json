{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ali\\\\Desktop\\\\MashinIran\\\\mashin_iran\\\\components\\\\ui\\\\MultiRange\\\\index.tsx\";\nimport cn from 'classnames';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport s from './multiRangeSlider.module.css';\n\nconst MultiRangeSlider = ({\n  min,\n  max,\n  onChange\n}) => {\n  const {\n    0: minVal,\n    1: setMinVal\n  } = useState(min);\n  const {\n    0: maxVal,\n    1: setMaxVal\n  } = useState(max);\n  const minValRef = useRef(min);\n  const maxValRef = useRef(max);\n  const range = useRef(null); // Convert to percentage\n\n  const getPercent = useCallback(value => Math.round((value - min) / (max - min) * 100), [min, max]); // Set width of the range to decrease from the left side\n\n  useEffect(() => {\n    const minPercent = getPercent(minVal);\n    const maxPercent = getPercent(maxValRef.current);\n\n    if (range.current) {\n      range.current.style.left = `${minPercent}%`;\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n  }, [minVal, getPercent]); // Set width of the range to decrease from the right side\n\n  useEffect(() => {\n    const minPercent = getPercent(minValRef.current);\n    const maxPercent = getPercent(maxVal);\n\n    if (range.current) {\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n  }, [maxVal, getPercent]); // Get min and max values when their state changes\n\n  useEffect(() => {\n    onChange({\n      min: minVal,\n      max: maxVal\n    });\n  }, [minVal, maxVal, onChange]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    dir: \"ltr\",\n    className: s['container'],\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: min,\n      max: max,\n      value: minVal,\n      onChange: event => {\n        const value = Math.min(Number(event.target.value), maxVal - 1);\n        setMinVal(value);\n        minValRef.current = value;\n      },\n      className: cn(s.thumb, s['thumb--left']),\n      style: {\n        zIndex: minVal > max - 100 ? 5 : 3\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: min,\n      max: max,\n      value: maxVal,\n      onChange: event => {\n        const value = Math.max(Number(event.target.value), minVal + 1);\n        setMaxVal(value);\n        maxValRef.current = value;\n      },\n      className: cn(s.thumb, s['thumb--right'])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s['slider'],\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: s['slider__track']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: range,\n        className: s['slider__range']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: s['slider__left-value'],\n        children: minVal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: s['slider__right-value'],\n        children: maxVal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\nexport default MultiRangeSlider;","map":{"version":3,"sources":["C:/Users/Ali/Desktop/MashinIran/mashin_iran/components/ui/MultiRange/index.tsx"],"names":["cn","React","useCallback","useEffect","useRef","useState","s","MultiRangeSlider","min","max","onChange","minVal","setMinVal","maxVal","setMaxVal","minValRef","maxValRef","range","getPercent","value","Math","round","minPercent","maxPercent","current","style","left","width","event","Number","target","thumb","zIndex"],"mappings":"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","sourcesContent":["import cn from 'classnames';\r\nimport React, { ChangeEvent, FC, useCallback, useEffect, useRef, useState } from 'react';\r\n\r\nimport s from './multiRangeSlider.module.css';\r\n\r\ninterface MultiRangeSliderProps {\r\n    min: number;\r\n    max: number;\r\n    onChange: Function;\r\n}\r\n\r\nconst MultiRangeSlider: FC<MultiRangeSliderProps> = ({ min, max, onChange }) => {\r\n    const [minVal, setMinVal] = useState(min);\r\n    const [maxVal, setMaxVal] = useState(max);\r\n    const minValRef = useRef(min);\r\n    const maxValRef = useRef(max);\r\n    const range = useRef<HTMLDivElement>(null);\r\n\r\n    // Convert to percentage\r\n    const getPercent = useCallback(\r\n        (value: number) => Math.round(((value - min) / (max - min)) * 100),\r\n        [min, max],\r\n    );\r\n\r\n    // Set width of the range to decrease from the left side\r\n    useEffect(() => {\r\n        const minPercent = getPercent(minVal);\r\n        const maxPercent = getPercent(maxValRef.current);\r\n\r\n        if (range.current) {\r\n            range.current.style.left = `${minPercent}%`;\r\n            range.current.style.width = `${maxPercent - minPercent}%`;\r\n        }\r\n    }, [minVal, getPercent]);\r\n\r\n    // Set width of the range to decrease from the right side\r\n    useEffect(() => {\r\n        const minPercent = getPercent(minValRef.current);\r\n        const maxPercent = getPercent(maxVal);\r\n\r\n        if (range.current) {\r\n            range.current.style.width = `${maxPercent - minPercent}%`;\r\n        }\r\n    }, [maxVal, getPercent]);\r\n\r\n    // Get min and max values when their state changes\r\n    useEffect(() => {\r\n        onChange({ min: minVal, max: maxVal });\r\n    }, [minVal, maxVal, onChange]);\r\n\r\n    return (\r\n        <div dir=\"ltr\" className={s['container']}>\r\n            <input\r\n                type=\"range\"\r\n                min={min}\r\n                max={max}\r\n                value={minVal}\r\n                onChange={(event: ChangeEvent<HTMLInputElement>) => {\r\n                    const value = Math.min(Number(event.target.value), maxVal - 1);\r\n                    setMinVal(value);\r\n                    minValRef.current = value;\r\n                }}\r\n                className={cn(s.thumb, s['thumb--left'])}\r\n                style={{ zIndex: minVal > max - 100 ? 5 : 3 }}\r\n            />\r\n            <input\r\n                type=\"range\"\r\n                min={min}\r\n                max={max}\r\n                value={maxVal}\r\n                onChange={(event: ChangeEvent<HTMLInputElement>) => {\r\n                    const value = Math.max(Number(event.target.value), minVal + 1);\r\n                    setMaxVal(value);\r\n                    maxValRef.current = value;\r\n                }}\r\n                className={cn(s.thumb, s['thumb--right'])}\r\n            />\r\n\r\n            <div className={s['slider']}>\r\n                <div className={s['slider__track']}></div>\r\n                <div ref={range} className={s['slider__range']}></div>\r\n                <div className={s['slider__left-value']}>{minVal}</div>\r\n                <div className={s['slider__right-value']}>{maxVal}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MultiRangeSlider;\r\n"]},"metadata":{},"sourceType":"module"}